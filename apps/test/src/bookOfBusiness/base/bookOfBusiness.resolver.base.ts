/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateBookOfBusinessArgs } from "./CreateBookOfBusinessArgs";
import { UpdateBookOfBusinessArgs } from "./UpdateBookOfBusinessArgs";
import { DeleteBookOfBusinessArgs } from "./DeleteBookOfBusinessArgs";
import { BookOfBusinessFindManyArgs } from "./BookOfBusinessFindManyArgs";
import { BookOfBusinessFindUniqueArgs } from "./BookOfBusinessFindUniqueArgs";
import { BookOfBusiness } from "./BookOfBusiness";
import { BookOfBusinessService } from "../bookOfBusiness.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => BookOfBusiness)
export class BookOfBusinessResolverBase {
  constructor(
    protected readonly service: BookOfBusinessService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "BookOfBusiness",
    action: "read",
    possession: "any",
  })
  async _bookOfBusinessesMeta(
    @graphql.Args() args: BookOfBusinessFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [BookOfBusiness])
  @nestAccessControl.UseRoles({
    resource: "BookOfBusiness",
    action: "read",
    possession: "any",
  })
  async bookOfBusinesses(
    @graphql.Args() args: BookOfBusinessFindManyArgs
  ): Promise<BookOfBusiness[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => BookOfBusiness, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "BookOfBusiness",
    action: "read",
    possession: "own",
  })
  async bookOfBusiness(
    @graphql.Args() args: BookOfBusinessFindUniqueArgs
  ): Promise<BookOfBusiness | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BookOfBusiness)
  @nestAccessControl.UseRoles({
    resource: "BookOfBusiness",
    action: "create",
    possession: "any",
  })
  async createBookOfBusiness(
    @graphql.Args() args: CreateBookOfBusinessArgs
  ): Promise<BookOfBusiness> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BookOfBusiness)
  @nestAccessControl.UseRoles({
    resource: "BookOfBusiness",
    action: "update",
    possession: "any",
  })
  async updateBookOfBusiness(
    @graphql.Args() args: UpdateBookOfBusinessArgs
  ): Promise<BookOfBusiness | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BookOfBusiness)
  @nestAccessControl.UseRoles({
    resource: "BookOfBusiness",
    action: "delete",
    possession: "any",
  })
  async deleteBookOfBusiness(
    @graphql.Args() args: DeleteBookOfBusinessArgs
  ): Promise<BookOfBusiness | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
